---
import Button from "./Button.astro";

/*
    This right here is what you call pure genius.

    - import all in images
    - map to `[ route, module().default ]`
    - group into an object where the key is what's inbetween `./images/` and `.*` and the value is an array containing the `[ route, module().default ]` arrays
    - convert `module().default` into an `Object.entries()` array
    - flatMap all of the `Object.entries(module().default)`s along with the basename
    - combine all that into one object
    
    Basically: import everything in ./images,
    and combine everything with the same basename into one object
*/

import { groupBy } from "../../util/polyfills";

export interface Metadata {
    alt?: string;
    url?: string;
    order?: number;
    basename: string;
    group?: string;
    hidden?: boolean;
}

export type ImportedImage =
    (ImageMetadata & Metadata)
    ({ directUrl: string } & Metadata);

const images_scopeDefaultsUnapplied = Object.entries(
    groupBy(
        await Promise.all(
            Object.entries(import.meta.glob("./images/**/*")).map(
                async ([key, prom]) => [
                    (key.match(/\.\/images\/(?:(.*)\/)?(.*)\..*/) || []).slice(
                        1,
                    ),
                    ((await prom()) as any)?.default,
                ],
            ),
        ),
        ([name, obj]) => `${name[0] || ""}/${name[1]}`,
    ),
).map(
    ([k, arrays]) =>
        arrays &&
        Object.fromEntries([
            ...arrays.flatMap((array) => Object.entries(array[1])),
            ["basename", arrays[0][0]?.[1] || k],
            ["group", arrays[0][0]?.[0]],
        ]),
) as unknown as ImportedImage[];

const images_scopeDefaults = Object.fromEntries(
    images_scopeDefaultsUnapplied
        .filter((e) => e.basename == "__scope__")
        .map((e) => [e.group, e])
);

const images = images_scopeDefaultsUnapplied
    .filter((e) => e.basename != "__scope__")
    .map((e) =>
        Object.assign(
            e.group || "" in images_scopeDefaults
                ? Object.assign({}, images_scopeDefaults[e.group || ""])
                : {},
            e,
        ),
    )
    .sort((a, b) => (a.order ?? 100) - (b.order ?? 100));

const { filter = (button) => !button.hidden } = Astro.props;

export interface Props {
    filter?: Parameters<typeof images.filter>[0];
}
---

<style lang="scss">
    div {
        display: flex;
        flex-direction: column;
        gap: 10px;
        flex-wrap: wrap;
        justify-content: center;
        flex-direction: row;
    }
</style>

<div>
    {images.filter(filter).map((image) => <Button image={image} />)}
</div>
